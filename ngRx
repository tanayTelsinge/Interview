# üìö NgRx Notes for Angular

NgRx is a reactive state management library for Angular, inspired by Redux.

---

## ‚öôÔ∏è Core Concepts

| Concept      | Description                                                                 |
|--------------|-----------------------------------------------------------------------------|
| **Store**    | Holds the application state as a single immutable object                    |
| **Action**   | Describes an event (e.g. user clicks, API call started/succeeded/failed)    |
| **Reducer**  | Pure function to update state based on an action                            |
| **Selector** | Function to query a slice of state                                          |
| **Effect**   | Handles side effects like HTTP requests, uses `Actions` stream              |

---

## üì¶ Packages

```bash
ng add @ngrx/store
ng add @ngrx/effects
ng add @ngrx/store-devtools

### NgRx flow

Component
   ‚¨á dispatch(action)
Effect (optional side effects)
   ‚¨á
Reducer
   ‚¨á
Store (state updated)
   ‚¨á
Component (subscribes via select)


### Example

When the component loads, it:

Dispatches loadBill({ reservationId: 101 })

Effect calls /api/reservations/101/bill

On success, dispatches loadBillSuccess ‚Üí reducer updates store

Component selects and displays bill info



```
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ reservation/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bill.model.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bill.actions.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bill.reducer.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bill.effects.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bill.service.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ bill.component.ts

```

## bill.model.ts

``` ts
export interface ReservationBill {
  reservationId: number;
  customerName: string;
  amount: number;
  status: 'PAID' | 'PENDING' | 'CANCELLED';
}

```

## bill.actions.ts

```
import { createAction, props } from '@ngrx/store';
import { ReservationBill } from './bill.model';

export const loadBill = createAction(
  '[Reservation] Load Bill',
  props<{ reservationId: number }>()
);

export const loadBillSuccess = createAction(
  '[Reservation] Load Bill Success',
  props<{ bill: ReservationBill }>()
);

export const loadBillFailure = createAction(
  '[Reservation] Load Bill Failure',
  props<{ error: any }>()
);

```


## bill.reducer.ts
```
import { createReducer, on } from '@ngrx/store';
import * as BillActions from './bill.actions';
import { ReservationBill } from './bill.model';

export interface BillState {
  bill: ReservationBill | null;
  loading: boolean;
  error: any;
}

export const initialState: BillState = {
  bill: null,
  loading: false,
  error: null
};

export const billReducer = createReducer(
  initialState,
  on(BillActions.loadBill, state => ({ ...state, loading: true })),
  on(BillActions.loadBillSuccess, (state, { bill }) => ({ ...state, bill, loading: false })),
  on(BillActions.loadBillFailure, (state, { error }) => ({ ...state, error, loading: false }))
);


```

## bill.effects.ts

```
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { ReservationService } from './bill.service';
import * as BillActions from './bill.actions';
import { catchError, map, mergeMap } from 'rxjs/operators';
import { of } from 'rxjs';

@Injectable()
export class BillEffects {
  constructor(private actions$: Actions, private reservationService: ReservationService) {}

  loadBill$ = createEffect(() =>
    this.actions$.pipe(
      ofType(BillActions.loadBill),
      mergeMap(action =>
        this.reservationService.getBill(action.reservationId).pipe(
          map(bill => BillActions.loadBillSuccess({ bill })),
          catchError(error => of(BillActions.loadBillFailure({ error })))
        )
      )
    )
  );
}


```

## bill.service.ts

```

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ReservationBill } from './bill.model';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class ReservationService {
  constructor(private http: HttpClient) {}

  getBill(reservationId: number): Observable<ReservationBill> {
    return this.http.get<ReservationBill>(`/api/reservations/${reservationId}/bill`);
  }
}

```

## bill.component.ts
```

import { Component, OnInit } from '@angular/core';
import { Store } from '@ngrx/store';
import * as BillActions from './bill.actions';
import { Observable } from 'rxjs';
import { ReservationBill } from './bill.model';

@Component({
  selector: 'app-bill',
  template: `
    <div *ngIf="loading$ | async">Loading bill...</div>
    <div *ngIf="bill$ | async as bill">
      <h3>Reservation Bill #{{ bill.reservationId }}</h3>
      <p>Customer: {{ bill.customerName }}</p>
      <p>Amount: ‚Çπ{{ bill.amount }}</p>
      <p>Status: {{ bill.status }}</p>
    </div>
  `
})
export class BillComponent implements OnInit {
  bill$: Observable<ReservationBill | null> = this.store.select(state => state.bill.bill);
  loading$: Observable<boolean> = this.store.select(state => state.bill.loading);

  constructor(private store: Store) {}

  ngOnInit() {
    this.store.dispatch(BillActions.loadBill({ reservationId: 101 }));
  }
}


```

## Register in app module

```
StoreModule.forRoot({ bill: billReducer }),
EffectsModule.forRoot([BillEffects])

```
